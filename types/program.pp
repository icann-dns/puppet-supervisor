type Supervisor::Program = Struct[{
  command                 => String[1],
  process_name            => Optional[String[1]],
  numprocs                => Optional[Integer[1]],
  numprocs_start          => Optional[Integer[0]],
  autostart               => Optional[Boolean],
  priority                => Optional[Integer[1]],
  startsecs               => Optional[Integer[1]],
  startretries            => Optional[Integer[1]],
  autorestart             => Optional[Boolean],
  exitcodes               => Optional[Array[Integer[0]]],
  stopsignal              => Optional[Supervisor::Stop_signal],
  stopwaitsecs            => Optional[Integer[1]],
  stopasgroup             => Optional[Boolean],
  killasgroup             => Optional[Boolean],
  user                    => Optional[String[1]],
  redirect_stderr         => Optional[Boolean],
  stdout_logfile          => Optional[Stdlib::Absolutepath],
  stdout_logfile_maxbytes => Optional[Pattern[/\d+[KMG]B/]],
  stdout_logfile_backups  => Optional[Integer[1]],
  stdout_capture_maxbytes => Optional[Pattern[/\d+[KMG]B/]],
  stdout_events_enabled   => Optional[Boolean],
  stderr_logfile          => Optional[Stdlib::Absolutepath],
  stderr_logfile_maxbytes => Optional[Pattern[/\d+[KMG]B/]],
  stderr_logfile_backups  => Optional[Integer[1]],
  stderr_capture_maxbytes => Optional[Pattern[/\d+[KMG]B/]],
  stderr_events_enabled   => Optional[Boolean],
  environment             => Optional[Hash[String[1],String[1]]],
  directory               => Optional[Stdlib::Absolutepath],
  umask                   => Optional[Pattern[/^[0-7]{3,4}$/]],
  serverurl               => Optional[String],
}]
